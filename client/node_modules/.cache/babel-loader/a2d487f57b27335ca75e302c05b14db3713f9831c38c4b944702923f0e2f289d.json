{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dakuy\\\\Desktop\\\\AppDev\\\\Taft-Overflow\\\\client\\\\src\\\\containers\\\\body\\\\scripted.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState } from 'react';\n\n// Helper function to recursively add a reply to the appropriate comment\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst addReply = (comments, parentId, newComment) => {\n  return comments.map(comment => {\n    if (comment.id === parentId) {\n      return {\n        ...comment,\n        replies: [...comment.replies, newComment]\n      };\n    } else if (comment.replies) {\n      return {\n        ...comment,\n        replies: addReply(comment.replies, parentId, newComment)\n      };\n    } else {\n      return comment;\n    }\n  });\n};\n\n// Main comment section component\nconst CommentsSection = () => {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [newCommentText, setNewCommentText] = useState('');\n  const postComment = (text, parentId = null) => {\n    if (!text.trim()) {\n      alert('Please enter a comment or reply.');\n      return;\n    }\n    const comment = {\n      id: Math.random().toString(36).substr(2, 9),\n      author: 'Anonymous',\n      text,\n      replies: []\n    };\n    if (parentId) {\n      setComments(prevComments => addReply(prevComments, parentId, comment));\n    } else {\n      setComments(prevComments => [...prevComments, comment]);\n    }\n    setNewCommentText('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"commentInput\",\n      value: newCommentText,\n      onChange: e => setNewCommentText(e.target.value),\n      placeholder: \"Write a comment...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"submit-button\",\n      onClick: () => postComment(newCommentText),\n      children: \"Post Comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments-list\",\n      children: comments.map(comment => /*#__PURE__*/_jsxDEV(Comment, {\n        comment: comment,\n        onReply: postComment\n      }, comment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n// Recursive comment component to handle infinite nesting\n_s(CommentsSection, \"xI0ZcJIll6A7wfp7J4ficufSB3E=\");\n_c = CommentsSection;\nconst Comment = ({\n  comment,\n  onReply\n}) => {\n  _s2();\n  var _comment$replies;\n  const [showReply, setShowReply] = useState(false);\n  const [replyText, setReplyText] = useState('');\n  const handleReply = () => {\n    onReply(replyText, comment.id);\n    setReplyText('');\n    setShowReply(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comment\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [comment.author, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), \" \", comment.text]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setShowReply(!showReply),\n      children: \"Reply\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), showReply && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-reply\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: replyText,\n        onChange: e => setReplyText(e.target.value),\n        placeholder: \"Write a reply...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReply,\n        children: \"Submit Reply\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }, this), ((_comment$replies = comment.replies) === null || _comment$replies === void 0 ? void 0 : _comment$replies.length) > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-replies\",\n      children: comment.replies.map(reply => /*#__PURE__*/_jsxDEV(Comment, {\n        comment: reply,\n        onReply: onReply\n      }, reply.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 7\n  }, this);\n};\n_s2(Comment, \"lixX1qJvkneWn1DLExZL68Q07u4=\");\n_c2 = Comment;\nexport default CommentsSection;\nvar _c, _c2;\n$RefreshReg$(_c, \"CommentsSection\");\n$RefreshReg$(_c2, \"Comment\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","addReply","comments","parentId","newComment","map","comment","id","replies","CommentsSection","_s","setComments","newCommentText","setNewCommentText","postComment","text","trim","alert","Math","random","toString","substr","author","prevComments","className","children","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","Comment","onReply","_c","_s2","_comment$replies","showReply","setShowReply","replyText","setReplyText","handleReply","length","reply","_c2","$RefreshReg$"],"sources":["C:/Users/Dakuy/Desktop/AppDev/Taft-Overflow/client/src/containers/body/scripted.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\n\r\n// Helper function to recursively add a reply to the appropriate comment\r\nconst addReply = (comments, parentId, newComment) => {\r\n  return comments.map(comment => {\r\n    if (comment.id === parentId) {\r\n      return { ...comment, replies: [...comment.replies, newComment] };\r\n    } else if (comment.replies) {\r\n      return { ...comment, replies: addReply(comment.replies, parentId, newComment) };\r\n    } else {\r\n      return comment;\r\n    }\r\n  });\r\n};\r\n\r\n// Main comment section component\r\nconst CommentsSection = () => {\r\n  const [comments, setComments] = useState([]);\r\n  const [newCommentText, setNewCommentText] = useState('');\r\n\r\n  const postComment = (text, parentId = null) => {\r\n    if (!text.trim()) {\r\n      alert('Please enter a comment or reply.');\r\n      return;\r\n    }\r\n    const comment = {\r\n      id: Math.random().toString(36).substr(2, 9),\r\n      author: 'Anonymous',\r\n      text,\r\n      replies: [],\r\n    };\r\n\r\n    if (parentId) {\r\n      setComments(prevComments => addReply(prevComments, parentId, comment));\r\n    } else {\r\n      setComments(prevComments => [...prevComments, comment]);\r\n    }\r\n\r\n    setNewCommentText('');\r\n  };\r\n\r\nreturn (\r\n    <div className=\"comments-section\">\r\n        <textarea\r\n            className=\"commentInput\"\r\n            value={newCommentText}\r\n            onChange={(e) => setNewCommentText(e.target.value)}\r\n            placeholder=\"Write a comment...\"\r\n        />\r\n        <button id=\"submit-button\" onClick={() => postComment(newCommentText)}>Post Comment</button>\r\n        <div className=\"comments-list\">\r\n            {comments.map(comment => (\r\n                <Comment key={comment.id} comment={comment} onReply={postComment} />\r\n            ))}\r\n        </div>\r\n    </div>\r\n);\r\n};\r\n\r\n\r\n// Recursive comment component to handle infinite nesting\r\nconst Comment = ({ comment, onReply }) => {\r\n    const [showReply, setShowReply] = useState(false);\r\n    const [replyText, setReplyText] = useState('');\r\n  \r\n    const handleReply = () => {\r\n      onReply(replyText, comment.id);\r\n      setReplyText('');\r\n      setShowReply(false);\r\n    };\r\n  \r\n    return (\r\n      <div className=\"comment\">\r\n        <div className=\"comment-content\">\r\n          <strong>{comment.author}:</strong> {comment.text}\r\n        </div>\r\n        <button onClick={() => setShowReply(!showReply)}>Reply</button>\r\n        {showReply && (\r\n          <div className=\"comment-reply\">\r\n            <textarea value={replyText} onChange={(e) => setReplyText(e.target.value)} placeholder=\"Write a reply...\" />\r\n            <button onClick={handleReply}>Submit Reply</button>\r\n          </div>\r\n        )}\r\n        {comment.replies?.length > 0 && (\r\n          <div className=\"comment-replies\">\r\n            {comment.replies.map(reply => (\r\n              <Comment key={reply.id} comment={reply} onReply={onReply} />\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n  \r\nexport default CommentsSection;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}